// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using app.Server.Models;

#nullable disable

namespace app.Server.Migrations
{
    [DbContext(typeof(EcodbContext))]
    [Migration("20240611080252_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("app.Server.Models.Acceptance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<int>("HazardousWasteId")
                        .HasColumnType("int")
                        .HasColumnName("hazardous_waste_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("transaction_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "HazardousWasteId" }, "IX_acceptance_hazardous_waste_id");

                    b.HasIndex(new[] { "TransactionId" }, "IX_acceptance_transaction_id");

                    b.ToTable("acceptance", (string)null);
                });

            modelBuilder.Entity("app.Server.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Bonuses")
                        .HasColumnType("int")
                        .HasColumnName("bonuses");

                    b.Property<DateTime>("DateEnd")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_start");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int")
                        .HasColumnName("partner_id");

                    b.Property<string>("Terms")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("terms");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PartnerId" }, "IX_discounts_partner_id");

                    b.ToTable("discounts", (string)null);
                });

            modelBuilder.Entity("app.Server.Models.Efmigrationshistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("MigrationId")
                        .HasName("PRIMARY");

                    b.ToTable("__efmigrationshistory", (string)null);
                });

            modelBuilder.Entity("app.Server.Models.HazardClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("hazard_class", (string)null);
                });

            modelBuilder.Entity("app.Server.Models.HazardousWaste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Bonuses")
                        .HasColumnType("int")
                        .HasColumnName("bonuses");

                    b.Property<int>("HazardClassId")
                        .HasColumnType("int")
                        .HasColumnName("hazard_class_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "HazardClassId" }, "IX_hazardous_waste_hazard_class_id");

                    b.ToTable("hazardous_waste", (string)null);
                });

            modelBuilder.Entity("app.Server.Models.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("partners", (string)null);
                });

            modelBuilder.Entity("app.Server.Models.Point", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "points_unique")
                        .IsUnique();

                    b.ToTable("points", (string)null);
                });

            modelBuilder.Entity("app.Server.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Bonus")
                        .HasColumnType("int")
                        .HasColumnName("bonus");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "products_unique")
                        .IsUnique();

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("app.Server.Models.ReceivingDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int")
                        .HasColumnName("discount_id");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("transaction_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DiscountId" }, "IX_receiving_discounts_discount_id");

                    b.HasIndex(new[] { "TransactionId" }, "IX_receiving_discounts_transaction_id");

                    b.ToTable("receiving_discounts", (string)null);
                });

            modelBuilder.Entity("app.Server.Models.ReceivingProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("transaction_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("receiving_products", (string)null);
                });

            modelBuilder.Entity("app.Server.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("app.Server.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("BonusesEnd")
                        .HasColumnType("int")
                        .HasColumnName("bonuses_end");

                    b.Property<int>("BonusesStart")
                        .HasColumnType("int")
                        .HasColumnName("bonuses_start");

                    b.Property<DateTime>("Date")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TypeId" }, "IX_transactions_type_id");

                    b.HasIndex(new[] { "UserId" }, "IX_transactions_user_id");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("app.Server.Models.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("transaction_types", (string)null);
                });

            modelBuilder.Entity("app.Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Bonuses")
                        .HasColumnType("int")
                        .HasColumnName("bonuses");

                    b.Property<string>("EmailHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email_hash");

                    b.Property<string>("Encrypt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("encrypt");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleId" }, "IX_users_role_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("app.Server.Models.Acceptance", b =>
                {
                    b.HasOne("app.Server.Models.HazardousWaste", "HazardousWaste")
                        .WithMany("Acceptances")
                        .HasForeignKey("HazardousWasteId")
                        .IsRequired()
                        .HasConstraintName("acceptance_hazardous_waste_id_fk");

                    b.HasOne("app.Server.Models.Transaction", "Transaction")
                        .WithMany("Acceptances")
                        .HasForeignKey("TransactionId")
                        .IsRequired()
                        .HasConstraintName("acceptance_transaction_id_fk");

                    b.Navigation("HazardousWaste");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("app.Server.Models.Discount", b =>
                {
                    b.HasOne("app.Server.Models.Partner", "Partner")
                        .WithMany("Discounts")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("app.Server.Models.HazardousWaste", b =>
                {
                    b.HasOne("app.Server.Models.HazardClass", "HazardClass")
                        .WithMany("HazardousWastes")
                        .HasForeignKey("HazardClassId")
                        .IsRequired()
                        .HasConstraintName("hazardous_waste_hazard_class_id_fk");

                    b.Navigation("HazardClass");
                });

            modelBuilder.Entity("app.Server.Models.ReceivingDiscount", b =>
                {
                    b.HasOne("app.Server.Models.Discount", "Discount")
                        .WithMany("ReceivingDiscounts")
                        .HasForeignKey("DiscountId")
                        .IsRequired()
                        .HasConstraintName("receiving_discounts_discount_id_fk");

                    b.HasOne("app.Server.Models.Transaction", "Transaction")
                        .WithMany("ReceivingDiscounts")
                        .HasForeignKey("TransactionId")
                        .IsRequired()
                        .HasConstraintName("receiving_discounts_transaction_id_fk");

                    b.Navigation("Discount");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("app.Server.Models.ReceivingProduct", b =>
                {
                    b.HasOne("app.Server.Models.Product", "IdNavigation")
                        .WithOne("ReceivingProduct")
                        .HasForeignKey("app.Server.Models.ReceivingProduct", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("receiving_products_products_FK");

                    b.HasOne("app.Server.Models.Transaction", "Id1")
                        .WithOne("ReceivingProduct")
                        .HasForeignKey("app.Server.Models.ReceivingProduct", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("receiving_products_transactions_FK");

                    b.Navigation("Id1");

                    b.Navigation("IdNavigation");
                });

            modelBuilder.Entity("app.Server.Models.Transaction", b =>
                {
                    b.HasOne("app.Server.Models.TransactionType", "Type")
                        .WithMany("Transactions")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("transactions_type_id_fk");

                    b.HasOne("app.Server.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("transactions_user_id_fk");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("app.Server.Models.User", b =>
                {
                    b.HasOne("app.Server.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("users_role_id_fk");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("app.Server.Models.Discount", b =>
                {
                    b.Navigation("ReceivingDiscounts");
                });

            modelBuilder.Entity("app.Server.Models.HazardClass", b =>
                {
                    b.Navigation("HazardousWastes");
                });

            modelBuilder.Entity("app.Server.Models.HazardousWaste", b =>
                {
                    b.Navigation("Acceptances");
                });

            modelBuilder.Entity("app.Server.Models.Partner", b =>
                {
                    b.Navigation("Discounts");
                });

            modelBuilder.Entity("app.Server.Models.Product", b =>
                {
                    b.Navigation("ReceivingProduct");
                });

            modelBuilder.Entity("app.Server.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("app.Server.Models.Transaction", b =>
                {
                    b.Navigation("Acceptances");

                    b.Navigation("ReceivingDiscounts");

                    b.Navigation("ReceivingProduct");
                });

            modelBuilder.Entity("app.Server.Models.TransactionType", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("app.Server.Models.User", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
